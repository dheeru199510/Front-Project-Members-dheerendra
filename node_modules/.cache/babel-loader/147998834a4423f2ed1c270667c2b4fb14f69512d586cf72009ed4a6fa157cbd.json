{"ast":null,"code":"var _jsxFileName = \"/home/dell/project/task-management-app/src/context/TaskContext.js\",\n  _s = $RefreshSig$();\n// src/context/TaskContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskContext = /*#__PURE__*/createContext();\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks on component mount\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const res = await fetch('https://dummyjson.com/todos');\n      const data = await res.json();\n      setTasks(data.todos);\n    };\n    fetchTasks();\n  }, []);\n\n  // Create a new task\n  const createTask = async newTask => {\n    const res = await fetch('https://dummyjson.com/todos/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTask)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  // Edit an existing task\n  const editTask = async updatedTask => {\n    const res = await fetch(`https://dummyjson.com/todos/${updatedTask.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === updatedTask.id ? {\n      ...task,\n      ...data\n    } : task));\n  };\n\n  // Delete a task\n  const deleteTask = async id => {\n    await fetch(`https://dummyjson.com/todos/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      createTask,\n      editTask,\n      deleteTask\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","tasks","setTasks","fetchTasks","res","fetch","data","json","todos","createTask","newTask","method","headers","body","JSON","stringify","editTask","updatedTask","id","map","task","deleteTask","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dell/project/task-management-app/src/context/TaskContext.js"],"sourcesContent":["// src/context/TaskContext.js\nimport React, { createContext, useState, useEffect } from 'react';\n\nexport const TaskContext = createContext();\n\nexport const TaskProvider = ({ children }) => {\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks on component mount\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const res = await fetch('https://dummyjson.com/todos');\n      const data = await res.json();\n      setTasks(data.todos);\n    };\n\n    fetchTasks();\n  }, []);\n\n  // Create a new task\n  const createTask = async (newTask) => {\n    const res = await fetch('https://dummyjson.com/todos/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newTask),\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  // Edit an existing task\n  const editTask = async (updatedTask) => {\n    const res = await fetch(`https://dummyjson.com/todos/${updatedTask.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updatedTask),\n    });\n    const data = await res.json();\n    setTasks(\n      tasks.map((task) => (task.id === updatedTask.id ? { ...task, ...data } : task))\n    );\n  };\n\n  // Delete a task\n  const deleteTask = async (id) => {\n    await fetch(`https://dummyjson.com/todos/${id}`, {\n      method: 'DELETE',\n    });\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  return (\n    <TaskContext.Provider value={{ tasks, createTask, editTask, deleteTask }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;MACtD,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7BL,QAAQ,CAACI,IAAI,CAACE,KAAK,CAAC;IACtB,CAAC;IAEDL,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,UAAU,GAAG,MAAOC,OAAO,IAAK;IACpC,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;MACzDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IACF,MAAMJ,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAC7BL,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEK,IAAI,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMU,QAAQ,GAAG,MAAOC,WAAW,IAAK;IACtC,MAAMb,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+BY,WAAW,CAACC,EAAE,EAAE,EAAE;MACvEP,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW;IAClC,CAAC,CAAC;IACF,MAAMX,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAC7BL,QAAQ,CACND,KAAK,CAACkB,GAAG,CAAEC,IAAI,IAAMA,IAAI,CAACF,EAAE,KAAKD,WAAW,CAACC,EAAE,GAAG;MAAE,GAAGE,IAAI;MAAE,GAAGd;IAAK,CAAC,GAAGc,IAAK,CAChF,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG,MAAOH,EAAE,IAAK;IAC/B,MAAMb,KAAK,CAAC,+BAA+Ba,EAAE,EAAE,EAAE;MAC/CP,MAAM,EAAE;IACV,CAAC,CAAC;IACFT,QAAQ,CAACD,KAAK,CAACqB,MAAM,CAAEF,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC;EAClD,CAAC;EAED,oBACEtB,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,KAAK;MAAEQ,UAAU;MAAEO,QAAQ;MAAEK;IAAW,CAAE;IAAAtB,QAAA,EACtEA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC5B,EAAA,CAvDWF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}