{"ast":null,"code":"var _jsxFileName = \"/home/dell/project/task-management-app/src/context/TaskContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskContext = /*#__PURE__*/createContext();\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks on component mount\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const res = await fetch('https://dummyjson.com/todos');\n      const data = await res.json();\n      console.log(data.todos);\n      setTasks(data.todos);\n    };\n    fetchTasks();\n  }, []);\n\n  // Create a new task\n  const createTask = async newTask => {\n    const res = await fetch('https://dummyjson.com/todos/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTask)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  // Edit an existing task\n  // const editTask = async (updatedTask) => {\n  //   const res = await fetch(`https://dummyjson.com/todos/${updatedTask.id}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify(updatedTask),\n  //   });\n  //   const data = await res.json();\n  //   setTasks(\n  //     tasks.map((task) => (task.id === updatedTask.id ? { ...task, ...data } : task))\n  //   );\n  // };\n\n  // Delete a task\n  const deleteTask = async id => {\n    await fetch(`https://dummyjson.com/todos/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const editTask = async updatedTask => {\n    setTasks(prevTasks => prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task));\n    console.log(updatedTask);\n    return;\n\n    // Sync with API (PUT request to update task)\n    try {\n      const response = await fetch(`https://dummyjsonapi.com/tasks/${updatedTask.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTask)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task on the server');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      createTask,\n      editTask,\n      deleteTask\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","tasks","setTasks","fetchTasks","res","fetch","data","json","console","log","todos","createTask","newTask","method","headers","body","JSON","stringify","deleteTask","id","filter","task","editTask","updatedTask","prevTasks","map","response","ok","Error","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dell/project/task-management-app/src/context/TaskContext.js"],"sourcesContent":["\nimport React, { createContext, useState, useEffect } from 'react';\n\nexport const TaskContext = createContext();\n\nexport const TaskProvider = ({ children }) => {\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks on component mount\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const res = await fetch('https://dummyjson.com/todos');\n      const data = await res.json();\n      console.log(data.todos)\n      setTasks(data.todos);\n    };\n\n    fetchTasks();\n  }, []);\n\n  // Create a new task\n  const createTask = async (newTask) => {\n    const res = await fetch('https://dummyjson.com/todos/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newTask),\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  };\n\n  // Edit an existing task\n  // const editTask = async (updatedTask) => {\n  //   const res = await fetch(`https://dummyjson.com/todos/${updatedTask.id}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify(updatedTask),\n  //   });\n  //   const data = await res.json();\n  //   setTasks(\n  //     tasks.map((task) => (task.id === updatedTask.id ? { ...task, ...data } : task))\n  //   );\n  // };\n\n  // Delete a task\n  const deleteTask = async (id) => {\n    await fetch(`https://dummyjson.com/todos/${id}`, {\n      method: 'DELETE',\n    });\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n  const editTask = async (updatedTask) => {\n    setTasks((prevTasks) => prevTasks.map(task => \n      task.id === updatedTask.id ? updatedTask : task\n    ));\n\n     console.log(updatedTask)\n     return;\n  \n    // Sync with API (PUT request to update task)\n    try {\n      const response = await fetch(`https://dummyjsonapi.com/tasks/${updatedTask.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedTask),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task on the server');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n\n  return (\n    <TaskContext.Provider value={{ tasks, createTask, editTask, deleteTask }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}